# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) Contributors to the OpenEXR Project.

# These are the steps for all CI jobs. Linux, macOS, and Windows all
# share a common set of configure/build/validate steps.  The input
# variables control all variations of the validation jobs.

name: CI Steps

on:
  workflow_call:
    # This inputs receive values via the "with:" section in ci_workflow.yml
    inputs:
      os:
        type: string
      container:
        type: string
      vfx-cy:
        type: string
      compiler-desc:
        type: string
      cxx-compiler:
        type: string
      cc-compiler:
        type: string
      cxx-standard:
        type: string
      build-type:
        type: string
      BUILD_SHARED_LIBS:
        type: string
      OPENEXR_ENABLE_THREADING:
        type: string
      OPENEXR_INSTALL_PKG_CONFIG:
        type: string
      OPENEXR_INSTALL_DOCS:
        type: string
      OPENEXR_BUILD_EXAMPLES:
        type: string
      OPENEXR_BUILD_TOOLS:
        type: string
      OPENEXR_BUILD_PYTHON:
        type: string
      OPENEXR_FORCE_INTERNAL_IMATH:
        type: string
      OPENEXR_FORCE_INTERNAL_DEFLATE:
        type: string
      BUILD_TESTING:
        type: string

jobs:
  ci_steps:
    runs-on: ${{ inputs.os }}

#    env:
#      CXX: ${{ inputs.cxx-compiler }}
#      CC: ${{ inputs.cc-compiler }}
#      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
#      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:

      - name: Checkout
        uses: actions/checkout@v3.6.0

      - name: Install Dependencies
        run: |
          # Install Imath and libdeflate first, so the steps below can
          # validate both building against an installation as well as
          # an internal build.
          share/ci/scripts/install_imath.sh main
          share/ci/scripts/install_libdeflate.sh master
          share/ci/scripts/install_help2man.sh
        shell: bash

      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
          mkdir _examples
        shell: bash

      - name: Construct CMake command and save it to environment
        run: |
          CMAKE_COMMAND="cmake -B . -S .. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} \
                -DOPENEXR_CXX_STANDARD=${{ inputs.cxx-standard }} \
                -DBUILD_SHARED_LIBS=${{ inputs.BUILD_SHARED_LIBS }} \
                -DOPENEXR_ENABLE_THREADING=${{ inputs.OPENEXR_ENABLE_THREADING }} \
                -DOPENEXR_INSTALL_PKG_CONFIG=${{ inputs.OPENEXR_INSTALL_PKG_CONFIG }} \
                -DOPENEXR_INSTALL_DOCS=${{ inputs.OPENEXR_INSTALL_DOCS }} \
                -DOPENEXR_BUILD_EXAMPLES=${{ inputs.OPENEXR_BUILD_EXAMPLES }} \
                -DOPENEXR_BUILD_TOOLS=${{ inputs.OPENEXR_BUILD_TOOLS }} \
                -DOPENEXR_BUILD_PYTHON=${{ inputs.OPENEXR_BUILD_PYTHON }} \
                -DOPENEXR_FORCE_INTERNAL_IMATH=${{ inputs.OPENEXR_FORCE_INTERNAL_IMATH }} \
                -DOPENEXR_FORCE_INTERNAL_DEFLATE=${{ inputs.OPENEXR_FORCE_INTERNAL_DEFLATE }} \
                -DBUILD_TESTING=${{ inputs.BUILD_TESTING }} \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='ON'"
          echo "CMAKE_COMMAND=$CMAKE_COMMAND" >> $GITHUB_ENV
        working-directory: _build
        shell: bash

      - name: Configure
        run: $CMAKE_COMMAND
        working-directory: _build
        shell: bash

      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ inputs.build-type }}
        working-directory: _build
        shell: bash

      - name: Test
        run: |
          ctest -T Test -C ${{ inputs.build-type }} --timeout 7200 --output-on-failure -VV
        working-directory: _build
        shell: bash
