# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) Contributors to the OpenEXR Project.
#
# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: CI

on:
  push:
    # Versioned branches and tags are ignored for OpenEXR <= 1.x.x
    branches-ignore:
      - RB-2.*
    tags-ignore:
      - v1.*
      - v2.*
    # Jobs are skipped when ONLY Markdown (*.md) files are changed
    paths-ignore:
      - '**.md'
  pull_request:
    branches-ignore:
      - RB-2.*
    tags-ignore:
      - v1.*
      - v2.*
    paths-ignore:
      - '**.md'

jobs:
  # Linux jobs run in Docker containers, so the latest OS version is OK. macOS 
  # and Windows jobs need to be locked to specific virtual environment 
  # versions to mitigate issues from OS updates, and will require maintenance 
  # as OS versions are retired.
  #
  # GH Actions (Free plan) supports 20 concurrent jobs, with 5 concurrent macOS 
  # jobs. This workflow tries to utilize (but not exceed) that budget to 
  # promote timely CI.

  # ---------------------------------------------------------------------------
  # Linux
  # ---------------------------------------------------------------------------
  # TODO: Add ARM build. Add sanitize build.

  linux:
    name: 'Linux ${{ matrix.label }}VFXP-${{ matrix.vfx-cy }} centos7
       <${{ matrix.compiler-desc }},
       C++${{ matrix.cxx-standard }},
       config=${{ matrix.build-type }},
       shared=${{ matrix.build-shared }},
       threads=${{ matrix.threads-enabled }},
       docs=${{ matrix.build-docs }}>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:${{ matrix.vfx-cy }}
    strategy:
      matrix:
        build: [1]
        include:

          # -------------------------------------------------------------------
          # VFX CY2022 - GCC
          # -------------------------------------------------------------------
          # Shared, Release
          - build: 1
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 17
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: gcc9.3.1
            label: 
            threads-enabled: 'ON'
            vfx-cy: 2022
            build-docs: 'ON'
            exclude-tests:

    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC: ${{ matrix.cc-compiler }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
          mkdir _examples
      - name: Install docs env
        run: share/ci/scripts/linux/yum/install_docs_env.sh
        if: matrix.build-docs == 'ON'
      - name: Configure
        run: |
          cmake .. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DBUILD_DOCS=${{ matrix.build-docs }} \
                -DOPENEXR_BUILD_TOOLS='ON' \
                -DOPENEXR_RUN_FUZZ_TESTS='OFF' \
                -DOPENEXR_ENABLE_THREADING=${{ matrix.threads-enabled }}
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }}
        working-directory: _build
      - name: Validate
        run: |
          share/ci/scripts/linux/validate_openexr_libs.sh _install 
      - name: Examples
        run: |
          # Make sure we can build the examples when configured as a
          # standalone application linking against the just-installed
          # OpenEXR library.
          cmake ../src/examples \
                -DCMAKE_PREFIX_PATH=../../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }}
          cmake --build . \
                --config ${{ matrix.build-type }}
          # Confirm the examples program runs
          ./bin/OpenEXRExamples
        working-directory: _examples
      - name: Test
        run: |
          ctest -T Test ${{ matrix.exclude-tests }} \
                -C ${{ matrix.build-type }} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

